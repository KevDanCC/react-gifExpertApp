{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifts.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categoriaLambda","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifts","ExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAC2B,IAAD,IADxBC,qBACwB,MAAlC,CAAC,OAAQ,SAAU,SAAe,IAEdC,mBAAS,IAFK,mBAE3CC,EAF2C,KAE/BC,EAF+B,KAoBlD,OAEI,mCACI,sBAAMC,SAdO,SAAAC,GACjBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAAAS,GAAe,OAChBP,GADgB,mBACFO,OAC3BN,EAAc,MASV,SACI,uBAAOO,KAAK,OACRC,MAAOT,EACPU,SAtBU,SAAAP,GACtBF,EAAcE,EAAEQ,OAAOF,e,+BCTlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACkCC,UAAUH,GAD5C,8DAEDI,MAAMF,GAFL,cAEbG,EAFa,gBAGCA,EAAKC,OAHN,uBAGZC,EAHY,EAGZA,KACDC,EAAKD,EAAKE,KAAI,SAAAC,GAChB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QARtB,kBAWXM,GAXW,4CAAH,sDCEPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAClC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAA6B,IAAD,IAA1BnB,gBAA0B,MAAf,CAAC,QAAc,ICCvB,SAACA,GAAc,IAAD,EACbd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KA0BvC,OAnBAC,qBAAU,WAGNxB,EAAQC,GAAUwB,MAAK,SAAAC,GAEnBC,YAAW,WACPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAIR,CAACpB,IAKGqB,EDzB2BM,CACE3B,GADtBa,EAFkC,EAExCN,KAAca,EAF0B,EAE1BA,QAItB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,2BACZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAEP,OAAO,cAAC,EAAD,eAECA,GADCA,EAAIC,aEdxBiB,EAAY,WAAO,IAAD,EACS1C,mBAAS,CAAC,mBADnB,mBACpB2C,EADoB,KACR5C,EADQ,KAU3B,OACI,qCACI,+CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ4C,EAAWpB,KAAI,SAAAT,GAEX,OAAO,cAAC,EAAD,CAENA,SAAUA,GADLA,YCrB9B8B,IAASC,OAAO,cAAC,EAAD,IACdC,SAASC,eAAe,W","file":"static/js/main.842935c8.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories = \r\n                    ['Test', 'Tester', 'Testo'] }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = e => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n        setCategories(categoriaLambda => \r\n                    [inputValue,...categoriaLambda]);\r\n        setInputValue('');\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <input type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange} />\r\n            </form>\r\n        </>\r\n    )\r\n};\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n","export const getGifs = async(category) =>{\r\n    const url= `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=5&api_key=5BcS3t0dCL0mRjBV44BFMVJzyXGxRaz0`\r\n    const resp= await fetch(url);\r\n    const {data}= await resp.json();\r\n    const gifs=data.map(img =>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n    return (gifs)\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useFetchGifts } from '../hooks/useFetchGifts';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category = [\"Test\"] }) => {\r\n\r\n    const { data: images, loading } = useFetchGifts(\r\n                                        category);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading . . .</p>}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => {\r\n\r\n                        return <GifGridItem\r\n                            key={img.id}\r\n                            {...img} />\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n\r\nexport const useFetchGifts = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        getGifs(category).then(imgs => {\r\n\r\n            setTimeout(() => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            }, 2000);\r\n\r\n        })\r\n\r\n    }, [category])\r\n\r\n\r\n\r\n\r\n    return state; //regresa el arreglo.\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const ExpertApp = () => {\r\n    const [categories, setCategories] = useState(['Rick and Morty']);\r\n    // const handleAdd= ()=>{\r\n    //     // setCategories(categories.concat(['Tester Channel']));\r\n    //     // setCategories([...categories,'nuevo Elemento']);\r\n    //     setCategories(categoriesLambda =>[ ...categoriesLambda,'Nuevo Elemento Lamnda']);\r\n    //     console.log(categories)\r\n    // }\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GiftExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => {\r\n                        // return <li key={category}>{category}</li>\r\n                        return <GifGrid\r\n                         key={category} \r\n                         category={category}/>\r\n                    })\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {ExpertApp} from './GifExpertApp';\n\nReactDOM.render(<ExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}